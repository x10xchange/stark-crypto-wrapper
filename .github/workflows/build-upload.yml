name: Test & Release

on:
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.9"
  PACKAGE_NAME: "fast_stark_crypto"

jobs:
  # macos:
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ env.PYTHON_VERSION }}
  #         architecture: x64
  #     - name: Install Rust toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal
  #         default: true
  #     - name: Build wheels - x86_64
  #       uses: messense/maturin-action@v1
  #       with:
  #         target: x86_64
  #         args: --release --out dist --sdist
  #         maturin-version: "v0.13.0"
  #     - name: Install built wheel - x86_64
  #       run: |
  #         pip install dist/${{ env.PACKAGE_NAME }}-*.whl --force-reinstall
  #         pip install pytest
  #         pytest -v
  #     - name: Build wheels - universal2
  #       uses: messense/maturin-action@v1
  #       with:
  #         args: --release --universal2 --out dist
  #         maturin-version: "v0.13.0"
  #     - name: Install built wheel - universal2
  #       run: |
  #         pip install dist/${{ env.PACKAGE_NAME }}-*universal2.whl --force-reinstall
  #         pip install pytest
  #         pytest -v
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: wheels
  #         path: dist

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64
      - name: Build wheels
        run: |
          docker run --rm --entrypoint=bash -v $(pwd):/io ghcr.io/pyo3/maturin -c 'for PYBIN in /opt/python/cp3*/bin; do ${PYBIN}/pip install maturin  && "${PYBIN}/maturin" build --out dist -i "${PYBIN}/python" --release --manylinux 2014 ; done'

      - name: Install built wheel
        if: matrix.target == 'x86_64'
        run: |
          pip${{ env.PYTHON_VERSION }} install --upgrade pip
          pip${{ env.PYTHON_VERSION }} install ${{env.PACKAGE_NAME}} --no-index --find-links dist --force-reinstall
          python -c "import ${{env.PACKAGE_NAME}} "
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [ linux ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *